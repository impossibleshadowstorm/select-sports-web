generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid()) @db.Uuid
  email        String    @unique
  name         String
  password     String
  phone        String
  dob          DateTime?
  role         Role
  gender       Gender
  skillsRating Int       @default(0)
  isVerified   Boolean   @default(false)
  isActive     Boolean   @default(true)
  otp          String?
  otpExpiresAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  addressId    String?   @unique @db.Uuid

  bookings      Booking[]
  hostProfile   Host?
  sportsProfile SportsProfile?
  transactions  Transaction[]
  address       Address?       @relation(fields: [addressId], references: [id])
  wallet        Wallet?
  teams         Team[]         @relation("TeamUsers")
  notifications  Notification[]    @relation("UserNotifications")
}

model Address {
  id         String          @id @default(uuid()) @db.Uuid
  street     String
  city       String
  state      AvailableStates
  postalCode String
  country    String          @default("INDIA")
  nearby     String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  User       User?
  Venue      Venue?
}

model SportsProfile {
  id                String            @id @default(uuid()) @db.Uuid
  skillLevel        SkillLevel
  preferredPosition PreferredPosition
  strength          String?
  weakness          String?
  preferredFoot     PreferredFoot
  favoriteNumber    Int?
  favoritePlayer    String?
  favoriteClub      String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            String            @unique @db.Uuid
  user              User              @relation(fields: [userId], references: [id])
}

model Venue {
  id          String           @id @default(uuid()) @db.Uuid
  name        String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  images      String[]
  description String
  locationUrl String
  amenities   VenueAmenities[]
  addressId   String           @unique @db.Uuid
  slots       Slot[]
  address     Address          @relation(fields: [addressId], references: [id])
  sports      Sport[]          @relation("SportToVenue")
}

model Sport {
  id          String          @id @default(uuid()) @db.Uuid
  name        AvailableSports @unique
  rules       String[]
  totalPlayer Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  slots       Slot[]
  venues      Venue[]         @relation("SportToVenue")
}

model Slot {
  id              String     @id @default(uuid()) @db.Uuid
  startTime       DateTime
  endTime         DateTime
  maxPlayer       Int
  slotType        SlotType   @default(MATCH)
  status          SlotStatus @default(AVAILABLE)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  price           Float
  discountedPrice Float
  sportId         String     @db.Uuid
  venueId         String     @db.Uuid
  team1Id         String?    @db.Uuid
  team2Id         String?    @db.Uuid
  hostId          String?    @db.Uuid
  bookings        Booking[]
  host            Host?      @relation(fields: [hostId], references: [id])
  sport           Sport      @relation(fields: [sportId], references: [id])
  team1           Team?      @relation("team1Relation", fields: [team1Id], references: [id])
  team2           Team?      @relation("team2Relation", fields: [team2Id], references: [id])
  venue           Venue      @relation(fields: [venueId], references: [id])
  notifications  Notification[]    @relation("SlotNotifications")
}

model Booking {
  id              String        @id @default(uuid()) @db.Uuid
  status          BookingStatus
  cancellationFee Int?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  slotId          String        @db.Uuid
  userId          String        @db.Uuid
  transactionId   String?       @db.Uuid

  slot        Slot         @relation(fields: [slotId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  transaction Transaction? @relation(fields: [transactionId], references: [id])
}

model Transaction {
  id        String        @id @default(uuid()) @db.Uuid
  userId    String        @db.Uuid
  method    PaymentMethod
  amount    Float
  currency  String        @default("INR")
  status    PaymentStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user      User                 @relation(fields: [userId], references: [id])
  razorpay  RazorpayTransaction?
  walletTxn WalletTransaction?
  Booking   Booking[]
}

model RazorpayTransaction {
  id                String   @id @default(uuid()) @db.Uuid
  transactionId     String   @unique @db.Uuid
  razorpayOrderId   String?  @unique
  razorpayPaymentId String?  @unique
  razorpaySignature String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  transaction Transaction @relation(fields: [transactionId], references: [id])
}

model WalletTransaction {
  id              String          @id @default(uuid()) @db.Uuid
  transactionId   String          @unique @db.Uuid
  walletId        String          @db.Uuid
  transactionType TransactionType
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  transaction Transaction @relation(fields: [transactionId], references: [id])
  wallet      Wallet      @relation(fields: [walletId], references: [id])
}

model Wallet {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @db.Uuid
  balance   Float    @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User                @relation(fields: [userId], references: [id])
  transactions WalletTransaction[]
}

model Host {
  id                String          @id @default(uuid()) @db.Uuid
  occupation        Occupation      @default(EMPLOYED_FULL_TIME)
  userId            String          @db.Uuid @unique
  user              User            @relation(fields: [userId], references: [id])
  slots             Slot[]
  playFootball      YesNo           @default(NO)
  car               YesNo           @default(NO)
  bike              YesNo           @default(NO)
  usedThisApp       YesNo           @default(NO)
  experienceInOrgCS YesNo           @default(NO)
  commitHours CommitHours @default(LESS_THAN_5_HOURS)
  preferredSchedule Schedule[]
  status            HostStatus      @default(PENDING)
  keyHighlights     String?
  currentLocation   AvailableStates @default(DELHI_NCR)
}

model Team {
  id           String     @id @default(uuid()) @db.Uuid
  name         String
  color        String
  status       TeamStatus @default(PENDING)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  slotsAsTeam1 Slot[]     @relation("team1Relation")
  slotsAsTeam2 Slot[]     @relation("team2Relation")
  users        User[]     @relation("TeamUsers")
}


model Notification {
  id           String      @id @default(uuid()) @db.Uuid
  title        String
  message      String
  type         NotificationType
  isRead       Boolean     @default(false)
  userId       String?     @db.Uuid  
  slotId       String?     @db.Uuid  
  target       TargetType             
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  expiresAt    DateTime?

  user User? @relation("UserNotifications", fields: [userId], references: [id])
  slot Slot? @relation("SlotNotifications", fields: [slotId], references: [id])
}

enum NotificationType {
  SYSTEM
  ADMIN
  HOST
}

enum TargetType {
  SPECIFIC_USER
  ALL_USERS
  SPECIFIC_SLOT
  ALL_SLOTS
  SLOT_USERS 
  ALL_HOSTS
  SPECIFIC_HOST
}

enum YesNo {
  NO
  YES
}

enum CommitHours {
  LESS_THAN_5_HOURS
  FIVE_TO_TEN_HOURS
  MORE_THAN_TEN_HOURS
}
enum Occupation {
  EMPLOYED_FULL_TIME
  EMPLOYED_PART_TIME
  UNEMPLOYED
  STUDENT
  ATHELETE
  SPORTS_MAN
}

enum Schedule {
  WEEKDAYS_MORNING
  WEEKDAYS_EVENING
  WEEKEND_MORNING
  WEEKEND_EVENING
  WEEKDAYS_AFTERNOON
  WEEKEND_AFTERNOON
}

enum HostStatus {
  PENDING
  APRROVED
  REJECTED
  REVOKED
}

enum Role {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
}

enum PaymentMethod {
  WALLET
  RAZORPAY
  STRIPE
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUND_PROCESSING
  REFUND_SUCCESSFUL
}

enum SlotType {
  PRACTICE
  MATCH
  TRAINING
}

enum SlotStatus {
  AVAILABLE
  BOOKED
  CANCELLED
  EXECUTED
}

enum AvailableSports {
  FOOTBALL
}

enum AvailableStates {
  DELHI
  DELHI_NCR
  GURGAON
}

enum SkillLevel {
  BEGINNER
  ACADEMY
  INTERMEDIATE
  SEMI_PRO
  PROFESSIONAL
}

enum PreferredFoot {
  RIGHT
  LEFT
}

enum PreferredPosition {
  GOALKEEPER
  DEFENDER_RIGHT_CENTER_BACK
  DEFENDER_LEFT_CENTER_BACK
  DEFENDER_RIGHT_FULL_BACK
  DEFENDER_LEFT_FULL_BACK
  DEFENSIVE_MIDFIELDER
  RIGHT_ATTACKING_MIDFIELDER
  LEFT_ATTACKING_MIDFIELDER
  STRIKER
  RIGHT_WINGER
  LEFT_WINGER
}

enum VenueAmenities {
  DRINKING_WATER
  WALKING_TRACK
  WASHROOM
  WARM_UP_AREA
  COACHING_AVAILABLE
  PARKING
  BALL_BOY
  ARTIFICIAL_TURF
  LOCKER_ROOM
  CAFE
  SITTING_AREA
  SHOWERS
  SOUND_SYSTEM
  WIFI
  FLOOD_LIGHTS
}

enum TeamStatus {
  PENDING
  WIN
  LOSE
}
